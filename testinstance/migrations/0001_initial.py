# Generated by Django 2.1.7 on 2019-04-02 10:47

import basedata
from django.db import migrations, models
import django.db.models.deletion
import testinstance.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('testcontent', '0001_initial'),
        ('basedata', '0002_auto_20190402_1047'),
    ]

    operations = [
        migrations.CreateModel(
            name='MicroServiceApiTestInstance',
            fields=[
                ('id', models.CharField(db_column='id', default=basedata.get_uuid, editable=False, max_length=32, primary_key=True, serialize=False)),
                ('test_date', models.DateField(verbose_name='日期')),
                ('host', models.CharField(db_column='host', max_length=100, verbose_name='host')),
                ('min_wait', models.IntegerField(db_column='min_wait', verbose_name='任务间最小等待时间(ms)')),
                ('max_wait', models.IntegerField(db_column='max_wait', verbose_name='任务间最大等待时间(ms)')),
                ('run_time', models.IntegerField(db_column='run_time', verbose_name='模拟用户执行多长时间(s)')),
                ('locust_count', models.IntegerField(db_column='locust_count', verbose_name='模拟用户总数')),
                ('hatch_rate', models.IntegerField(db_column='hatch_rate', verbose_name='每秒生成的模拟用户数')),
                ('token_url', models.CharField(blank=True, db_column='token_url', max_length=100, null=True, verbose_name='单点登录地址')),
                ('user', models.CharField(blank=True, db_column='user', max_length=100, null=True, verbose_name='用户')),
                ('password', models.CharField(blank=True, db_column='password', max_length=100, null=True, verbose_name='密码')),
                ('token_params', models.TextField(blank=True, db_column='token_params', null=True, verbose_name='参数')),
                ('describe', models.TextField(blank=True, db_column='describe', null=True, verbose_name='描述')),
                ('running_status', models.BooleanField(db_column='running_status', default=False, verbose_name='是否在运行')),
                ('test_content', models.ManyToManyField(db_column='test_content', to='testcontent.MicroServiceApi', verbose_name='选取测试服务')),
                ('test_mode', models.ForeignKey(db_column='test_mode', limit_choices_to={'test_type': 'api'}, on_delete=django.db.models.deletion.PROTECT, to='basedata.PressureTestMode', verbose_name='测试方式')),
            ],
            options={
                'verbose_name': '微服务接口压力测试实例',
                'verbose_name_plural': '微服务接口压力测试实例',
                'db_table': 'micro_service_api_test_instance',
            },
        ),
        migrations.CreateModel(
            name='SeleniumTestInstance',
            fields=[
                ('id', models.CharField(db_column='id', default=basedata.get_uuid, editable=False, max_length=32, primary_key=True, serialize=False)),
                ('test_date', models.DateField(verbose_name='日期')),
                ('min_wait', models.IntegerField(db_column='min_wait', verbose_name='任务间最小等待时间(ms)')),
                ('max_wait', models.IntegerField(db_column='max_wait', verbose_name='任务间最大等待时间(ms)')),
                ('run_time', models.IntegerField(db_column='run_time', verbose_name='模拟用户执行多长时间(s)')),
                ('locust_count', models.IntegerField(db_column='locust_count', verbose_name='模拟用户总数')),
                ('hatch_rate', models.IntegerField(db_column='hatch_rate', verbose_name='每秒生成的模拟用户数')),
                ('browser_mode', models.CharField(choices=[('有界', '有界'), ('无界', '无界')], db_column='browser_mode', max_length=10, verbose_name='是否显示浏览器')),
                ('time_out', models.IntegerField(db_column='time_out', verbose_name='查找元素超时时间(s)')),
                ('side', models.FileField(db_column='side', unique=True, upload_to=testinstance.models.upload_path, verbose_name='测试脚本文件')),
                ('test_mode', models.ForeignKey(db_column='test_mode', limit_choices_to={'test_type': 'browser'}, on_delete=django.db.models.deletion.PROTECT, to='basedata.PressureTestMode', verbose_name='测试方式')),
            ],
            options={
                'verbose_name': '模拟浏览器测试实例',
                'verbose_name_plural': '模拟浏览器测试实例',
                'db_table': 'selenium_test_instance',
            },
        ),
    ]
